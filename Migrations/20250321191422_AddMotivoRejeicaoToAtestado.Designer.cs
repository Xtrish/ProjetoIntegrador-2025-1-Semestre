// <auto-generated />
using System;
using AtestadoMedico.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtestadoMedico.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250321191422_AddMotivoRejeicaoToAtestado")]
    partial class AddMotivoRejeicaoToAtestado
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtestadoMedico.Models.Atestado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AtualizadoPor")
                        .HasColumnType("integer");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DataAtestado")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MotivoRejeicao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TipoArquivo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Atestados");
                });

            modelBuilder.Entity("AtestadoMedico.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCadastro = new DateTime(2024, 3, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.com",
                            IsAdmin = true,
                            Nome = "Administrador",
                            Senha = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DataCadastro = new DateTime(2024, 3, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "usuario@teste.com",
                            IsAdmin = false,
                            Nome = "Usuário Teste",
                            Senha = "123456"
                        },
                        new
                        {
                            Id = 3,
                            DataCadastro = new DateTime(2024, 3, 18, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "junior@gmail.com",
                            IsAdmin = true,
                            Nome = "Junior",
                            Senha = "junior@123"
                        });
                });

            modelBuilder.Entity("AtestadoMedico.Models.Atestado", b =>
                {
                    b.HasOne("AtestadoMedico.Models.Usuario", "Usuario")
                        .WithMany("Atestados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AtestadoMedico.Models.Usuario", b =>
                {
                    b.Navigation("Atestados");
                });
#pragma warning restore 612, 618
        }
    }
}
